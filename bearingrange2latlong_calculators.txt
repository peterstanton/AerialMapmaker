function Point_At_Distance_And_Bearing(start_lat,start_lon,distance_text,bearing) { // input is in degrees, km, degrees
	// http://www.fcc.gov/mb/audio/bickel/sprong.html
	var ending_point = []; // output
	var earth_radius = 6378137; // equatorial radius
	// var earth_radius = 6356752; // polar radius
	// var earth_radius = 6371000; // typical radius
	var start_lat_rad = deg2rad(parseCoordinate(start_lat));
	var start_lon_rad = deg2rad(parseCoordinate(start_lon));
	var distance = parseDistance(distance_text);
	
	bearing = parseBearing(bearing);
	if (Math.abs(bearing) >= 360) { bearing = bearing % 360; }
	bearing = (bearing < 0) ? bearing+360 : bearing;
	var isig = (bearing <= 180) ? 1 : 0; // western half of circle = 0, eastern half = 1
	var a = 360-bearing; // this subroutine measures angles COUNTER-clockwise, so +3 becomes +357
	a = deg2rad(a); var bb = (Math.PI/2)-start_lat_rad; var cc = distance/earth_radius;
	var sin_bb = Math.sin(bb); var cos_bb = Math.cos(bb); var cos_cc = Math.cos(cc);
	var cos_aa = cos_bb*cos_cc+(sin_bb*Math.sin(cc)*Math.cos(a));
	if (cos_aa <= -1) { cos_aa = -1; } if (cos_aa >= 1) { cos_aa = 1; }
	var aa = (cos_aa.toFixed(15) == 1) ? 0 : Math.acos(cos_aa);
	var cos_c = (cos_cc-(cos_aa*cos_bb))/(Math.sin(aa)*sin_bb);
	if (cos_c <= -1) { cos_c = -1; } if (cos_c >= 1) { cos_c = 1; }
	var c = (cos_c.toFixed(15) == 1) ? 0 : Math.acos(cos_c);
	var end_lat_rad = (Math.PI/2)-aa;
	var end_lon_rad = start_lon_rad-c;
	if (isig == 1) { end_lon_rad = start_lon_rad + c; }
	if (end_lon_rad > Math.PI) { end_lon_rad = end_lon_rad - (2*Math.PI); }
	if (end_lon_rad < (0-Math.PI)) { end_lon_rad = end_lon_rad + (2*Math.PI); }
	ending_point[0] = rad2deg(end_lat_rad); ending_point[1] = rad2deg(end_lon_rad);
	// Use proportional error to adjust things due to oblate Earth; I'm still not entirely sure how/why this works:
	for (i=0; i<5; i++) {
		var vincenty = Vincenty_Distance(start_lat,start_lon,ending_point[0],ending_point[1],false,true);
		if (Math.abs(start_lon-ending_point[1]) > 180) {
			 // something went haywire
		} else {
			var error = (vincenty != 0) ? distance/vincenty : 1;
			var dlat = ending_point[0]-parseFloat(start_lat); var dlon = ending_point[1]-parseFloat(start_lon);
			ending_point[0] = parseFloat(start_lat)+(dlat*error); ending_point[1] = parseFloat(start_lon)+(dlon*error);
		}
	}
	return (ending_point);
}

function Point_At_Distance_And_Bearing2(start_lat,start_lon,distance_text,bearing) { // input is in degrees, km, degrees
	// http://www.movable-type.co.uk/scripts/latlong.html
	var earth_radius = 6371000; // "average" radius
	var distance = parseDistance(distance_text);
	bearing = deg2rad(parseBearing(bearing));
	var start_lat_rad = deg2rad(parseCoordinate(start_lat));
	var start_lon_rad = deg2rad(parseCoordinate(start_lon));
	var ending_point = []; // output
	var arc = distance/earth_radius;
	var end_lat_rad = Math.asin( Math.sin(start_lat_rad)*Math.cos(arc) + Math.cos(start_lat_rad)*Math.sin(arc)*Math.cos(bearing) );
	var end_lon_rad = start_lon_rad + Math.atan2( Math.sin(bearing)*Math.sin(arc)*Math.cos(start_lat_rad),Math.cos(arc)-Math.sin(start_lat_rad)*Math.sin(end_lat_rad));
	end_lon_rad = (end_lon_rad+Math.PI)%(2*Math.PI) - Math.PI; // normalise to -180...+180
	ending_point[0] = rad2deg(end_lat_rad); ending_point[1] = rad2deg(end_lon_rad);

	return (ending_point);
}